-------------------------------------------------------------------------------
-- Copyright (C) 2009 OutputLogic.com
-- This source file may be used and distributed without restriction
-- provided that this copyright statement is not removed from the file
-- and that any derivative work contains the original copyright notice
-- and the associated disclaimer.
-- 
-- THIS SOURCE FILE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
-- OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
-- WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-------------------------------------------------------------------------------
-- CRC module for data(31:0)
--   lfsr(19:0)=1+x^1+x^2+x^3+x^4+x^7+x^8+x^10+x^12+x^13+x^19+x^20;
-------------------------------------------------------------------------------
-- 17-06-2020: Frans Schreuder changed the VHDL generated by OutputLogic
--             in order to have a reset while calculating the first word
--             of the CRC. The generics are ignored, but are there for
--             compatibility reasons.
library ieee;
use ieee.std_logic_1164.all;

entity CRC_OL is
   generic(
     Nbits :  positive 	:= 32;
     CRC_Width		  :  positive 	:= 20;
     G_Poly: Std_Logic_Vector :=x"8359f";
     G_InitVal: std_logic_vector:=x"fffff"
     );
   port(
     CRC   : out    std_logic_vector(CRC_Width-1 downto 0);
     Calc  : in     std_logic;
     Clk   : in     std_logic;
     DIn   : in     std_logic_vector(Nbits-1 downto 0);
     Reset : in     std_logic);
end CRC_OL;

architecture imp_crc of CRC_OL is
  signal lfsr_c: std_logic_vector (19 downto 0);
begin
    CRC <= lfsr_c;

    

    process (Clk) 
      variable lfsr_q: std_logic_vector (19 downto 0);
    begin
      if rising_edge(Clk) then
        if (Reset = '1') then
          lfsr_q := b"11111111111111111111";
          if Calc = '0' then
            lfsr_c <= lfsr_q;
          end if;
        else
          lfsr_q := lfsr_c;
        end if;
      
        if (Calc = '1') then
           lfsr_c(0) <= lfsr_q(1) xor lfsr_q(2) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(8) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(13) xor lfsr_q(16) xor lfsr_q(17) xor lfsr_q(18) xor lfsr_q(19) xor Din(0) xor Din(1) xor Din(2) xor Din(3) xor Din(4) xor Din(5) xor Din(6) xor Din(10) xor Din(13) xor Din(14) xor Din(17) xor Din(18) xor Din(20) xor Din(22) xor Din(23) xor Din(25) xor Din(28) xor Din(29) xor Din(30) xor Din(31);
           lfsr_c(1) <= lfsr_q(1) xor lfsr_q(3) xor lfsr_q(5) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(12) xor lfsr_q(13) xor lfsr_q(14) xor lfsr_q(16) xor Din(0) xor Din(7) xor Din(10) xor Din(11) xor Din(13) xor Din(15) xor Din(17) xor Din(19) xor Din(20) xor Din(21) xor Din(22) xor Din(24) xor Din(25) xor Din(26) xor Din(28);
           lfsr_c(2) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(9) xor lfsr_q(14) xor lfsr_q(15) xor lfsr_q(16) xor lfsr_q(18) xor lfsr_q(19) xor Din(0) xor Din(2) xor Din(3) xor Din(4) xor Din(5) xor Din(6) xor Din(8) xor Din(10) xor Din(11) xor Din(12) xor Din(13) xor Din(16) xor Din(17) xor Din(21) xor Din(26) xor Din(27) xor Din(28) xor Din(30) xor Din(31);
           lfsr_c(3) <= lfsr_q(0) xor lfsr_q(8) xor lfsr_q(11) xor lfsr_q(13) xor lfsr_q(15) xor lfsr_q(18) xor Din(0) xor Din(2) xor Din(7) xor Din(9) xor Din(10) xor Din(11) xor Din(12) xor Din(20) xor Din(23) xor Din(25) xor Din(27) xor Din(30);
           lfsr_c(4) <= lfsr_q(0) xor lfsr_q(2) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(12) xor lfsr_q(13) xor lfsr_q(14) xor lfsr_q(17) xor lfsr_q(18) xor Din(0) xor Din(2) xor Din(4) xor Din(5) xor Din(6) xor Din(8) xor Din(11) xor Din(12) xor Din(14) xor Din(17) xor Din(18) xor Din(20) xor Din(21) xor Din(22) xor Din(23) xor Din(24) xor Din(25) xor Din(26) xor Din(29) xor Din(30);
           lfsr_c(5) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(3) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(12) xor lfsr_q(13) xor lfsr_q(14) xor lfsr_q(15) xor lfsr_q(18) xor lfsr_q(19) xor Din(1) xor Din(3) xor Din(5) xor Din(6) xor Din(7) xor Din(9) xor Din(12) xor Din(13) xor Din(15) xor Din(18) xor Din(19) xor Din(21) xor Din(22) xor Din(23) xor Din(24) xor Din(25) xor Din(26) xor Din(27) xor Din(30) xor Din(31);
           lfsr_c(6) <= lfsr_q(1) xor lfsr_q(2) xor lfsr_q(4) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(12) xor lfsr_q(13) xor lfsr_q(14) xor lfsr_q(15) xor lfsr_q(16) xor lfsr_q(19) xor Din(2) xor Din(4) xor Din(6) xor Din(7) xor Din(8) xor Din(10) xor Din(13) xor Din(14) xor Din(16) xor Din(19) xor Din(20) xor Din(22) xor Din(23) xor Din(24) xor Din(25) xor Din(26) xor Din(27) xor Din(28) xor Din(31);
           lfsr_c(7) <= lfsr_q(1) xor lfsr_q(3) xor lfsr_q(6) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(12) xor lfsr_q(14) xor lfsr_q(15) xor lfsr_q(18) xor lfsr_q(19) xor Din(0) xor Din(1) xor Din(2) xor Din(4) xor Din(6) xor Din(7) xor Din(8) xor Din(9) xor Din(10) xor Din(11) xor Din(13) xor Din(15) xor Din(18) xor Din(21) xor Din(22) xor Din(24) xor Din(26) xor Din(27) xor Din(30) xor Din(31);
           lfsr_c(8) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(15) xor lfsr_q(17) xor lfsr_q(18) xor Din(0) xor Din(4) xor Din(6) xor Din(7) xor Din(8) xor Din(9) xor Din(11) xor Din(12) xor Din(13) xor Din(16) xor Din(17) xor Din(18) xor Din(19) xor Din(20) xor Din(27) xor Din(29) xor Din(30);
           lfsr_c(9) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(2) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(16) xor lfsr_q(18) xor lfsr_q(19) xor Din(1) xor Din(5) xor Din(7) xor Din(8) xor Din(9) xor Din(10) xor Din(12) xor Din(13) xor Din(14) xor Din(17) xor Din(18) xor Din(19) xor Din(20) xor Din(21) xor Din(28) xor Din(30) xor Din(31);
           lfsr_c(10) <= lfsr_q(3) xor lfsr_q(5) xor lfsr_q(7) xor lfsr_q(9) xor lfsr_q(11) xor lfsr_q(13) xor lfsr_q(16) xor lfsr_q(18) xor Din(0) xor Din(1) xor Din(3) xor Din(4) xor Din(5) xor Din(8) xor Din(9) xor Din(11) xor Din(15) xor Din(17) xor Din(19) xor Din(21) xor Din(23) xor Din(25) xor Din(28) xor Din(30);
           lfsr_c(11) <= lfsr_q(0) xor lfsr_q(4) xor lfsr_q(6) xor lfsr_q(8) xor lfsr_q(10) xor lfsr_q(12) xor lfsr_q(14) xor lfsr_q(17) xor lfsr_q(19) xor Din(1) xor Din(2) xor Din(4) xor Din(5) xor Din(6) xor Din(9) xor Din(10) xor Din(12) xor Din(16) xor Din(18) xor Din(20) xor Din(22) xor Din(24) xor Din(26) xor Din(29) xor Din(31);
           lfsr_c(12) <= lfsr_q(2) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(15) xor lfsr_q(16) xor lfsr_q(17) xor lfsr_q(19) xor Din(0) xor Din(1) xor Din(4) xor Din(7) xor Din(11) xor Din(14) xor Din(18) xor Din(19) xor Din(20) xor Din(21) xor Din(22) xor Din(27) xor Din(28) xor Din(29) xor Din(31);
           lfsr_c(13) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(2) xor lfsr_q(3) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(9) xor lfsr_q(13) xor lfsr_q(19) xor Din(0) xor Din(3) xor Din(4) xor Din(6) xor Din(8) xor Din(10) xor Din(12) xor Din(13) xor Din(14) xor Din(15) xor Din(17) xor Din(18) xor Din(19) xor Din(21) xor Din(25) xor Din(31);
           lfsr_c(14) <= lfsr_q(1) xor lfsr_q(2) xor lfsr_q(3) xor lfsr_q(4) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(10) xor lfsr_q(14) xor Din(1) xor Din(4) xor Din(5) xor Din(7) xor Din(9) xor Din(11) xor Din(13) xor Din(14) xor Din(15) xor Din(16) xor Din(18) xor Din(19) xor Din(20) xor Din(22) xor Din(26);
           lfsr_c(15) <= lfsr_q(0) xor lfsr_q(2) xor lfsr_q(3) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(11) xor lfsr_q(15) xor Din(2) xor Din(5) xor Din(6) xor Din(8) xor Din(10) xor Din(12) xor Din(14) xor Din(15) xor Din(16) xor Din(17) xor Din(19) xor Din(20) xor Din(21) xor Din(23) xor Din(27);
           lfsr_c(16) <= lfsr_q(1) xor lfsr_q(3) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(8) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(12) xor lfsr_q(16) xor Din(3) xor Din(6) xor Din(7) xor Din(9) xor Din(11) xor Din(13) xor Din(15) xor Din(16) xor Din(17) xor Din(18) xor Din(20) xor Din(21) xor Din(22) xor Din(24) xor Din(28);
           lfsr_c(17) <= lfsr_q(0) xor lfsr_q(2) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(13) xor lfsr_q(17) xor Din(4) xor Din(7) xor Din(8) xor Din(10) xor Din(12) xor Din(14) xor Din(16) xor Din(17) xor Din(18) xor Din(19) xor Din(21) xor Din(22) xor Din(23) xor Din(25) xor Din(29);
           lfsr_c(18) <= lfsr_q(1) xor lfsr_q(3) xor lfsr_q(5) xor lfsr_q(6) xor lfsr_q(7) xor lfsr_q(8) xor lfsr_q(10) xor lfsr_q(11) xor lfsr_q(12) xor lfsr_q(14) xor lfsr_q(18) xor Din(5) xor Din(8) xor Din(9) xor Din(11) xor Din(13) xor Din(15) xor Din(17) xor Din(18) xor Din(19) xor Din(20) xor Din(22) xor Din(23) xor Din(24) xor Din(26) xor Din(30);
           lfsr_c(19) <= lfsr_q(0) xor lfsr_q(1) xor lfsr_q(4) xor lfsr_q(5) xor lfsr_q(7) xor lfsr_q(9) xor lfsr_q(10) xor lfsr_q(12) xor lfsr_q(15) xor lfsr_q(16) xor lfsr_q(17) xor lfsr_q(18) xor Din(0) xor Din(1) xor Din(2) xor Din(3) xor Din(4) xor Din(5) xor Din(9) xor Din(12) xor Din(13) xor Din(16) xor Din(17) xor Din(19) xor Din(21) xor Din(22) xor Din(24) xor Din(27) xor Din(28) xor Din(29) xor Din(30);

        end if;
      end if;
    end process;
end architecture imp_crc; 

