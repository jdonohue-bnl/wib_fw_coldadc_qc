-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_tx_path is

  constant IPBUS_SEL_WIDTH: positive := 3;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_tx_path(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Thu Nov 10 09:43:39 2022)
  constant N_SLV_TX_PATH_CSR: integer := 0;
  constant N_SLV_UDP_CORE_0: integer := 1;
  constant N_SLV_UDP_CORE_1: integer := 2;
  constant N_SLV_UDP_CORE_2: integer := 3;
  constant N_SLV_UDP_CORE_3: integer := 4;
  constant N_SLAVES: integer := 5;
-- END automatically generated VHDL

    
end ipbus_decode_tx_path;

package body ipbus_decode_tx_path is

  function ipbus_sel_tx_path(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Thu Nov 10 09:43:39 2022)
    if    std_match(addr, "------------------000-----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_TX_PATH_CSR, IPBUS_SEL_WIDTH)); -- tx_path_csr / base 0x00000000 / mask 0x00003800
    elsif std_match(addr, "------------------001-----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_UDP_CORE_0, IPBUS_SEL_WIDTH)); -- udp_core_0 / base 0x00000800 / mask 0x00003800
    elsif std_match(addr, "------------------010-----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_UDP_CORE_1, IPBUS_SEL_WIDTH)); -- udp_core_1 / base 0x00001000 / mask 0x00003800
    elsif std_match(addr, "------------------100-----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_UDP_CORE_2, IPBUS_SEL_WIDTH)); -- udp_core_2 / base 0x00002000 / mask 0x00003800
    elsif std_match(addr, "------------------110-----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_UDP_CORE_3, IPBUS_SEL_WIDTH)); -- udp_core_3 / base 0x00003000 / mask 0x00003800
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_tx_path;

end ipbus_decode_tx_path;

